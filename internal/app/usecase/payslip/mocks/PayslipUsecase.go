// Code generated by mockery v2.42.2. DO NOT EDIT.

package mocks

import (
	context "context"

	payslip "github.com/alimasyhur/go-payroll-service/internal/app/usecase/payslip"
	mock "github.com/stretchr/testify/mock"
)

// PayslipUsecase is an autogenerated mock type for the PayslipUsecase type
type PayslipUsecase struct {
	mock.Mock
}

// GetOnePayslip provides a mock function with given fields: ctx, req
func (_m *PayslipUsecase) GetOnePayslip(ctx context.Context, req payslip.GetOnePayslipRequest) (payslip.GetOnePayslipResponse, error) {
	ret := _m.Called(ctx, req)

	if len(ret) == 0 {
		panic("no return value specified for GetOnePayslip")
	}

	var r0 payslip.GetOnePayslipResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, payslip.GetOnePayslipRequest) (payslip.GetOnePayslipResponse, error)); ok {
		return rf(ctx, req)
	}
	if rf, ok := ret.Get(0).(func(context.Context, payslip.GetOnePayslipRequest) payslip.GetOnePayslipResponse); ok {
		r0 = rf(ctx, req)
	} else {
		r0 = ret.Get(0).(payslip.GetOnePayslipResponse)
	}

	if rf, ok := ret.Get(1).(func(context.Context, payslip.GetOnePayslipRequest) error); ok {
		r1 = rf(ctx, req)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetSummary provides a mock function with given fields: ctx, req
func (_m *PayslipUsecase) GetSummary(ctx context.Context, req payslip.GetSummaryRequest) (payslip.GetSummaryResponse, error) {
	ret := _m.Called(ctx, req)

	if len(ret) == 0 {
		panic("no return value specified for GetSummary")
	}

	var r0 payslip.GetSummaryResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, payslip.GetSummaryRequest) (payslip.GetSummaryResponse, error)); ok {
		return rf(ctx, req)
	}
	if rf, ok := ret.Get(0).(func(context.Context, payslip.GetSummaryRequest) payslip.GetSummaryResponse); ok {
		r0 = rf(ctx, req)
	} else {
		r0 = ret.Get(0).(payslip.GetSummaryResponse)
	}

	if rf, ok := ret.Get(1).(func(context.Context, payslip.GetSummaryRequest) error); ok {
		r1 = rf(ctx, req)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewPayslipUsecase creates a new instance of PayslipUsecase. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewPayslipUsecase(t interface {
	mock.TestingT
	Cleanup(func())
}) *PayslipUsecase {
	mock := &PayslipUsecase{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
