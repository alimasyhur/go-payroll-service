// Code generated by mockery v2.42.2. DO NOT EDIT.

package mocks

import (
	context "context"

	reimbursement "github.com/alimasyhur/go-payroll-service/internal/app/usecase/reimbursement"
	mock "github.com/stretchr/testify/mock"
)

// ReimbursementUsecase is an autogenerated mock type for the ReimbursementUsecase type
type ReimbursementUsecase struct {
	mock.Mock
}

// CreateReimbursement provides a mock function with given fields: ctx, req
func (_m *ReimbursementUsecase) CreateReimbursement(ctx context.Context, req reimbursement.ReimbursementRequest) (reimbursement.ReimbursementResponse, error) {
	ret := _m.Called(ctx, req)

	if len(ret) == 0 {
		panic("no return value specified for CreateReimbursement")
	}

	var r0 reimbursement.ReimbursementResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, reimbursement.ReimbursementRequest) (reimbursement.ReimbursementResponse, error)); ok {
		return rf(ctx, req)
	}
	if rf, ok := ret.Get(0).(func(context.Context, reimbursement.ReimbursementRequest) reimbursement.ReimbursementResponse); ok {
		r0 = rf(ctx, req)
	} else {
		r0 = ret.Get(0).(reimbursement.ReimbursementResponse)
	}

	if rf, ok := ret.Get(1).(func(context.Context, reimbursement.ReimbursementRequest) error); ok {
		r1 = rf(ctx, req)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewReimbursementUsecase creates a new instance of ReimbursementUsecase. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewReimbursementUsecase(t interface {
	mock.TestingT
	Cleanup(func())
}) *ReimbursementUsecase {
	mock := &ReimbursementUsecase{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
