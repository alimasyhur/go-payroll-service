// Code generated by mockery v2.42.2. DO NOT EDIT.

package mocks

import (
	context "context"

	attendance "github.com/alimasyhur/go-payroll-service/internal/app/usecase/attendance"

	mock "github.com/stretchr/testify/mock"
)

// AttendanceUsecase is an autogenerated mock type for the AttendanceUsecase type
type AttendanceUsecase struct {
	mock.Mock
}

// CreateAttendance provides a mock function with given fields: ctx, req
func (_m *AttendanceUsecase) CreateAttendance(ctx context.Context, req attendance.AttendanceRequest) (attendance.AttendanceResponse, error) {
	ret := _m.Called(ctx, req)

	if len(ret) == 0 {
		panic("no return value specified for CreateAttendance")
	}

	var r0 attendance.AttendanceResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, attendance.AttendanceRequest) (attendance.AttendanceResponse, error)); ok {
		return rf(ctx, req)
	}
	if rf, ok := ret.Get(0).(func(context.Context, attendance.AttendanceRequest) attendance.AttendanceResponse); ok {
		r0 = rf(ctx, req)
	} else {
		r0 = ret.Get(0).(attendance.AttendanceResponse)
	}

	if rf, ok := ret.Get(1).(func(context.Context, attendance.AttendanceRequest) error); ok {
		r1 = rf(ctx, req)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CreateAttendancePeriod provides a mock function with given fields: ctx, req
func (_m *AttendanceUsecase) CreateAttendancePeriod(ctx context.Context, req attendance.AttendancePeriodRequest) (attendance.AttendancePeriodResponse, error) {
	ret := _m.Called(ctx, req)

	if len(ret) == 0 {
		panic("no return value specified for CreateAttendancePeriod")
	}

	var r0 attendance.AttendancePeriodResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, attendance.AttendancePeriodRequest) (attendance.AttendancePeriodResponse, error)); ok {
		return rf(ctx, req)
	}
	if rf, ok := ret.Get(0).(func(context.Context, attendance.AttendancePeriodRequest) attendance.AttendancePeriodResponse); ok {
		r0 = rf(ctx, req)
	} else {
		r0 = ret.Get(0).(attendance.AttendancePeriodResponse)
	}

	if rf, ok := ret.Get(1).(func(context.Context, attendance.AttendancePeriodRequest) error); ok {
		r1 = rf(ctx, req)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewAttendanceUsecase creates a new instance of AttendanceUsecase. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewAttendanceUsecase(t interface {
	mock.TestingT
	Cleanup(func())
}) *AttendanceUsecase {
	mock := &AttendanceUsecase{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
