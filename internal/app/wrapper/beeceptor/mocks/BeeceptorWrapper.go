// Code generated by mockery v2.14.0. DO NOT EDIT.

package mocks

import (
	context "context"

	beeceptor "github.com/weanan/weanan-service/internal/app/wrapper/beeceptor"

	mock "github.com/stretchr/testify/mock"
)

// BeeceptorWrapper is an autogenerated mock type for the BeeceptorWrapper type
type BeeceptorWrapper struct {
	mock.Mock
}

// GetSubdistrictByOrganizationName provides a mock function with given fields: ctx, name
func (_m *BeeceptorWrapper) GetSubdistrictByOrganizationName(ctx context.Context, name string) (beeceptor.GetOrganizationSubdistrictResponse, error) {
	ret := _m.Called(ctx, name)

	var r0 beeceptor.GetOrganizationSubdistrictResponse
	if rf, ok := ret.Get(0).(func(context.Context, string) beeceptor.GetOrganizationSubdistrictResponse); ok {
		r0 = rf(ctx, name)
	} else {
		r0 = ret.Get(0).(beeceptor.GetOrganizationSubdistrictResponse)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, name)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

type mockConstructorTestingTNewBeeceptorWrapper interface {
	mock.TestingT
	Cleanup(func())
}

// NewBeeceptorWrapper creates a new instance of BeeceptorWrapper. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewBeeceptorWrapper(t mockConstructorTestingTNewBeeceptorWrapper) *BeeceptorWrapper {
	mock := &BeeceptorWrapper{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
