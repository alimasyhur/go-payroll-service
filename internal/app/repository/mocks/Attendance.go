// Code generated by mockery v2.42.2. DO NOT EDIT.

package mocks

import (
	context "context"

	entity "github.com/alimasyhur/go-payroll-service/internal/app/entity"
	mock "github.com/stretchr/testify/mock"
)

// Attendance is an autogenerated mock type for the Attendance type
type Attendance struct {
	mock.Mock
}

// CreateAttendance provides a mock function with given fields: ctx, payload
func (_m *Attendance) CreateAttendance(ctx context.Context, payload entity.Attendance) (entity.Attendance, error) {
	ret := _m.Called(ctx, payload)

	if len(ret) == 0 {
		panic("no return value specified for CreateAttendance")
	}

	var r0 entity.Attendance
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, entity.Attendance) (entity.Attendance, error)); ok {
		return rf(ctx, payload)
	}
	if rf, ok := ret.Get(0).(func(context.Context, entity.Attendance) entity.Attendance); ok {
		r0 = rf(ctx, payload)
	} else {
		r0 = ret.Get(0).(entity.Attendance)
	}

	if rf, ok := ret.Get(1).(func(context.Context, entity.Attendance) error); ok {
		r1 = rf(ctx, payload)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetOneByUserDate provides a mock function with given fields: ctx, userUUID, date
func (_m *Attendance) GetOneByUserDate(ctx context.Context, userUUID string, date string) (entity.Attendance, error) {
	ret := _m.Called(ctx, userUUID, date)

	if len(ret) == 0 {
		panic("no return value specified for GetOneByUserDate")
	}

	var r0 entity.Attendance
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string) (entity.Attendance, error)); ok {
		return rf(ctx, userUUID, date)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, string) entity.Attendance); ok {
		r0 = rf(ctx, userUUID, date)
	} else {
		r0 = ret.Get(0).(entity.Attendance)
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, string) error); ok {
		r1 = rf(ctx, userUUID, date)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetWorkdaysByUserDaterange provides a mock function with given fields: ctx, userUUID, startDate, endDate
func (_m *Attendance) GetWorkdaysByUserDaterange(ctx context.Context, userUUID string, startDate string, endDate string) (int64, error) {
	ret := _m.Called(ctx, userUUID, startDate, endDate)

	if len(ret) == 0 {
		panic("no return value specified for GetWorkdaysByUserDaterange")
	}

	var r0 int64
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string, string) (int64, error)); ok {
		return rf(ctx, userUUID, startDate, endDate)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, string, string) int64); ok {
		r0 = rf(ctx, userUUID, startDate, endDate)
	} else {
		r0 = ret.Get(0).(int64)
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, string, string) error); ok {
		r1 = rf(ctx, userUUID, startDate, endDate)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateAttendance provides a mock function with given fields: ctx, data
func (_m *Attendance) UpdateAttendance(ctx context.Context, data entity.Attendance) error {
	ret := _m.Called(ctx, data)

	if len(ret) == 0 {
		panic("no return value specified for UpdateAttendance")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, entity.Attendance) error); ok {
		r0 = rf(ctx, data)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// NewAttendance creates a new instance of Attendance. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewAttendance(t interface {
	mock.TestingT
	Cleanup(func())
}) *Attendance {
	mock := &Attendance{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
