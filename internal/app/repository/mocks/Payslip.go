// Code generated by mockery v2.42.2. DO NOT EDIT.

package mocks

import (
	context "context"

	entity "github.com/alimasyhur/go-payroll-service/internal/app/entity"
	mock "github.com/stretchr/testify/mock"
)

// Payslip is an autogenerated mock type for the Payslip type
type Payslip struct {
	mock.Mock
}

// CreatePayslip provides a mock function with given fields: ctx, payload
func (_m *Payslip) CreatePayslip(ctx context.Context, payload entity.Payslip) (entity.Payslip, error) {
	ret := _m.Called(ctx, payload)

	if len(ret) == 0 {
		panic("no return value specified for CreatePayslip")
	}

	var r0 entity.Payslip
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, entity.Payslip) (entity.Payslip, error)); ok {
		return rf(ctx, payload)
	}
	if rf, ok := ret.Get(0).(func(context.Context, entity.Payslip) entity.Payslip); ok {
		r0 = rf(ctx, payload)
	} else {
		r0 = ret.Get(0).(entity.Payslip)
	}

	if rf, ok := ret.Get(1).(func(context.Context, entity.Payslip) error); ok {
		r1 = rf(ctx, payload)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetListByPayrollUUID provides a mock function with given fields: ctx, payrollUUID
func (_m *Payslip) GetListByPayrollUUID(ctx context.Context, payrollUUID string) ([]entity.Payslip, error) {
	ret := _m.Called(ctx, payrollUUID)

	if len(ret) == 0 {
		panic("no return value specified for GetListByPayrollUUID")
	}

	var r0 []entity.Payslip
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) ([]entity.Payslip, error)); ok {
		return rf(ctx, payrollUUID)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) []entity.Payslip); ok {
		r0 = rf(ctx, payrollUUID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]entity.Payslip)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, payrollUUID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetOneByUserPayrollUUID provides a mock function with given fields: ctx, userUUID, payrollUUID
func (_m *Payslip) GetOneByUserPayrollUUID(ctx context.Context, userUUID string, payrollUUID string) (entity.Payslip, error) {
	ret := _m.Called(ctx, userUUID, payrollUUID)

	if len(ret) == 0 {
		panic("no return value specified for GetOneByUserPayrollUUID")
	}

	var r0 entity.Payslip
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string) (entity.Payslip, error)); ok {
		return rf(ctx, userUUID, payrollUUID)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, string) entity.Payslip); ok {
		r0 = rf(ctx, userUUID, payrollUUID)
	} else {
		r0 = ret.Get(0).(entity.Payslip)
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, string) error); ok {
		r1 = rf(ctx, userUUID, payrollUUID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetOneDetailByPayrollUUID provides a mock function with given fields: ctx, payrollUUID
func (_m *Payslip) GetOneDetailByPayrollUUID(ctx context.Context, payrollUUID string) (entity.PayslipDetail, error) {
	ret := _m.Called(ctx, payrollUUID)

	if len(ret) == 0 {
		panic("no return value specified for GetOneDetailByPayrollUUID")
	}

	var r0 entity.PayslipDetail
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (entity.PayslipDetail, error)); ok {
		return rf(ctx, payrollUUID)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) entity.PayslipDetail); ok {
		r0 = rf(ctx, payrollUUID)
	} else {
		r0 = ret.Get(0).(entity.PayslipDetail)
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, payrollUUID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewPayslip creates a new instance of Payslip. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewPayslip(t interface {
	mock.TestingT
	Cleanup(func())
}) *Payslip {
	mock := &Payslip{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
