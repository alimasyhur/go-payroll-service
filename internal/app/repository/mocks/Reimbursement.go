// Code generated by mockery v2.42.2. DO NOT EDIT.

package mocks

import (
	context "context"

	entity "github.com/alimasyhur/go-payroll-service/internal/app/entity"
	mock "github.com/stretchr/testify/mock"
)

// Reimbursement is an autogenerated mock type for the Reimbursement type
type Reimbursement struct {
	mock.Mock
}

// CreateReimbursement provides a mock function with given fields: ctx, payload
func (_m *Reimbursement) CreateReimbursement(ctx context.Context, payload entity.Reimbursement) (entity.Reimbursement, error) {
	ret := _m.Called(ctx, payload)

	if len(ret) == 0 {
		panic("no return value specified for CreateReimbursement")
	}

	var r0 entity.Reimbursement
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, entity.Reimbursement) (entity.Reimbursement, error)); ok {
		return rf(ctx, payload)
	}
	if rf, ok := ret.Get(0).(func(context.Context, entity.Reimbursement) entity.Reimbursement); ok {
		r0 = rf(ctx, payload)
	} else {
		r0 = ret.Get(0).(entity.Reimbursement)
	}

	if rf, ok := ret.Get(1).(func(context.Context, entity.Reimbursement) error); ok {
		r1 = rf(ctx, payload)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetListByUserDaterange provides a mock function with given fields: ctx, userUUID, startDate, endDate
func (_m *Reimbursement) GetListByUserDaterange(ctx context.Context, userUUID string, startDate string, endDate string) ([]entity.Reimbursement, error) {
	ret := _m.Called(ctx, userUUID, startDate, endDate)

	if len(ret) == 0 {
		panic("no return value specified for GetListByUserDaterange")
	}

	var r0 []entity.Reimbursement
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string, string) ([]entity.Reimbursement, error)); ok {
		return rf(ctx, userUUID, startDate, endDate)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, string, string) []entity.Reimbursement); ok {
		r0 = rf(ctx, userUUID, startDate, endDate)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]entity.Reimbursement)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, string, string) error); ok {
		r1 = rf(ctx, userUUID, startDate, endDate)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewReimbursement creates a new instance of Reimbursement. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewReimbursement(t interface {
	mock.TestingT
	Cleanup(func())
}) *Reimbursement {
	mock := &Reimbursement{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
