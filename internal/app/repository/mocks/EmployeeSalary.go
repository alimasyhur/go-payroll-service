// Code generated by mockery v2.42.2. DO NOT EDIT.

package mocks

import (
	context "context"

	entity "github.com/alimasyhur/go-payroll-service/internal/app/entity"
	mock "github.com/stretchr/testify/mock"
)

// EmployeeSalary is an autogenerated mock type for the EmployeeSalary type
type EmployeeSalary struct {
	mock.Mock
}

// GetOneByUserUUID provides a mock function with given fields: ctx, userUUID
func (_m *EmployeeSalary) GetOneByUserUUID(ctx context.Context, userUUID string) (entity.EmployeeSalary, error) {
	ret := _m.Called(ctx, userUUID)

	if len(ret) == 0 {
		panic("no return value specified for GetOneByUserUUID")
	}

	var r0 entity.EmployeeSalary
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (entity.EmployeeSalary, error)); ok {
		return rf(ctx, userUUID)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) entity.EmployeeSalary); ok {
		r0 = rf(ctx, userUUID)
	} else {
		r0 = ret.Get(0).(entity.EmployeeSalary)
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, userUUID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewEmployeeSalary creates a new instance of EmployeeSalary. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewEmployeeSalary(t interface {
	mock.TestingT
	Cleanup(func())
}) *EmployeeSalary {
	mock := &EmployeeSalary{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
